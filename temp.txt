import { useState, useCallback, useMemo } from "react";
import {
  Search,
  Plus,
  Pencil,
  Trash2,
  Upload,
  X,
  Smartphone,
  AlertCircle,
} from "lucide-react";

// Define the Contact type
interface Contact {
  id: string;
  name: string;
  firstName: string;
  lastName: string;
  phone: string;
  isFromDevice: boolean;
}

// Define the Group type
interface Group {
  id: number;
  name: string;
  description: string;
  contacts: Contact[];
}

// Mock contacts for fallback
const mockContacts: Contact[] = [
  {
    id: "1",
    name: "John Doe",
    firstName: "John",
    lastName: "Doe",
    phone: "+91 9876543210",
    isFromDevice: false,
  },
  {
    id: "2",
    name: "Jane Smith",
    firstName: "Jane",
    lastName: "Smith",
    phone: "+91 9123456789",
    isFromDevice: false,
  },
];

// Initial groups data
const initialGroups: Group[] = [
  {
    id: 1,
    name: "Team Alpha",
    description: "Alpha team group",
    contacts: [mockContacts[0]],
  },
  {
    id: 2,
    name: "Team Beta",
    description: "Beta team group",
    contacts: [mockContacts[1]],
  },
];

export default function GroupsPage() {
  const [groups, setGroups] = useState<Group[]>(initialGroups);
  const [searchQuery, setSearchQuery] = useState("");
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [selectedGroup, setSelectedGroup] = useState<Group | null>(null);
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    contacts: [] as Contact[],
  });
  const [error, setError] = useState<string>("");

  // Filter groups based on search query
  const filteredGroups = useMemo(
    () =>
      groups.filter(
        (group) =>
          group.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
          group.description.toLowerCase().includes(searchQuery.toLowerCase())
      ),
    [groups, searchQuery]
  );

  // Check if dialog is in edit mode
  const isEditMode = selectedGroup !== null;

  const openEditDialog = useCallback((group: Group) => {
    setSelectedGroup(group);
    setFormData({
      name: group.name,
      description: group.description,
      contacts: group.contacts,
    });
    setIsDialogOpen(true);
  }, []);

  const openDeleteDialog = useCallback((group: Group) => {
    setSelectedGroup(group);
    setIsDeleteDialogOpen(true);
  }, []);

  // Form handlers
  const resetForm = useCallback(() => {
    setFormData({ name: "", description: "", contacts: [] });
    setError("");
  }, []);

  // Dialog handlers
  const openCreateDialog = useCallback(() => {
    resetForm();
    setSelectedGroup(null);
    setIsDialogOpen(true);
  }, [resetForm]);

  const validateForm = useCallback(() => {
    if (!formData.name.trim()) {
      setError("Group name is required.");
      return false;
    }
    if (formData.contacts.length === 0) {
      setError("At least one contact is required.");
      return false;
    }
    setError("");
    return true;
  }, [formData]);

  // CRUD operations
  const handleSaveGroup = useCallback(() => {
    if (!validateForm()) return;

    if (isEditMode && selectedGroup) {
      // Update existing group
      setGroups((prev) =>
        prev.map((group) =>
          group.id === selectedGroup.id ? { ...group, ...formData } : group
        )
      );
    } else {
      // Create new group
      const newGroup: Group = {
        id: Math.max(...groups.map((g) => g.id), 0) + 1,
        ...formData,
      };
      setGroups((prev) => [...prev, newGroup]);
    }

    setIsDialogOpen(false);
    setSelectedGroup(null);
    resetForm();
  }, [formData, groups, isEditMode, selectedGroup, validateForm, resetForm]);

  const handleDeleteGroup = useCallback(() => {
    if (!selectedGroup) return;
    setGroups((prev) => prev.filter((group) => group.id !== selectedGroup.id));
    setIsDeleteDialogOpen(false);
    setSelectedGroup(null);
  }, [selectedGroup]);

  // File import handler for CSV/Excel
  const handleFileImport = useCallback(
    async (event: React.ChangeEvent<HTMLInputElement>) => {
      const file = event.target.files?.[0];
      if (!file) return;

      setError("");

      try {
        const text = await file.text();
        const lines = text.split("\n").filter((line) => line.trim());

        // Simple CSV parsing - assumes format: name,phone
        const contacts: Contact[] = [];

        for (let i = 1; i < lines.length; i++) {
          // Skip header
          const [name, phone] = lines[i].split(",").map((s) => s.trim());
          if (name && phone) {
            const normalizedPhone = phone.startsWith("+")
              ? phone
              : `+91${phone}`;
            const [firstName = "", ...lastNameParts] = name.trim().split(" ");
            const lastName = lastNameParts.join(" ");

            contacts.push({
              id: `imported-${Date.now()}-${i}`,
              name: name.trim(),
              firstName,
              lastName,
              phone: normalizedPhone,
              isFromDevice: false,
            });
          }
        }

        if (contacts.length === 0) {
          setError(
            "No valid contacts found. Please ensure your CSV has 'name,phone' format."
          );
          return;
        }

        setFormData((prev) => ({
          ...prev,
          contacts: [...prev.contacts, ...contacts],
        }));
      } catch (err) {
        console.error("File import error:", err);
        setError("Failed to import contacts. Please check the file format.");
      }

      // Reset file input
      event.target.value = "";
    },
    []
  );

  const handleRemoveContact = useCallback((contactId: string) => {
    setFormData((prev) => ({
      ...prev,
      contacts: prev.contacts.filter((c) => c.id !== contactId),
    }));
  }, []);

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      {/* Header Section */}
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-gray-800">Groups</h1>
        <button
          onClick={openCreateDialog}
          className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
        >
          <Plus className="w-4 h-4" />
          Create New Group
        </button>
      </div>

      {/* Search Bar */}
      <div className="mb-6">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="Search groups by name or description"
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
      </div>

      {/* Contact Access Info Banner */}
      <div className="mb-6 bg-amber-50 border border-amber-200 rounded-lg p-4">
        <div className="flex items-start gap-3">
          <AlertCircle className="h-5 w-5 text-amber-600 mt-0.5 flex-shrink-0" />
          <div>
            <h3 className="text-amber-800 font-medium">
              Device Contacts Access
            </h3>
            <p className="text-amber-700 text-sm mt-1">
              Direct phone contact access is only available in mobile apps. For
              web browsers, please import contacts using CSV/Excel files.
            </p>
          </div>
        </div>
      </div>

      {/* Table Section */}
      <div className="bg-white shadow-sm rounded-lg border border-gray-200 overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-16">
                  #
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Group Name
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Contacts
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Description
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredGroups.length === 0 ? (
                <tr>
                  <td
                    colSpan={5}
                    className="px-6 py-10 text-center text-gray-500"
                  >
                    <div className="flex flex-col items-center gap-2">
                      <div className="w-12 h-12 rounded-full bg-gray-100 flex items-center justify-center">
                        <Search className="w-6 h-6 text-gray-400" />
                      </div>
                      <p>
                        {searchQuery
                          ? "No groups match your search"
                          : "No groups found. Create your first group to get started."}
                      </p>
                    </div>
                  </td>
                </tr>
              ) : (
                filteredGroups.map((group) => (
                  <tr key={group.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900">
                      {group.id}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">
                        {group.name}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                        {group.contacts.length} contacts
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 max-w-xs truncate">
                      {group.description || "No description"}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-2">
                      <button
                        onClick={() => openEditDialog(group)}
                        className="text-blue-600 hover:text-blue-900 hover:bg-blue-50 px-2 py-1 rounded inline-flex items-center gap-1"
                      >
                        <Pencil className="w-4 h-4" />
                        Edit
                      </button>
                      <button
                        onClick={() => openDeleteDialog(group)}
                        className="text-red-600 hover:text-red-900 hover:bg-red-50 px-2 py-1 rounded inline-flex items-center gap-1"
                      >
                        <Trash2 className="w-4 h-4" />
                        Delete
                      </button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Create/Edit Group Dialog */}
      {isDialogOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200">
              <h2 className="text-xl font-semibold text-gray-900">
                {isEditMode
                  ? `Edit ${selectedGroup?.name}`
                  : "Create New Group"}
              </h2>
              <p className="text-sm text-gray-500 mt-1">
                {isEditMode
                  ? "Update the group details below."
                  : "Fill in the details to create a new group."}
              </p>
            </div>

            <div className="p-6">
              {error && (
                <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm">
                  {error}
                </div>
              )}

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Group Name *
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) =>
                      setFormData((prev) => ({ ...prev, name: e.target.value }))
                    }
                    placeholder="Enter group name"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Description
                  </label>
                  <input
                    type="text"
                    value={formData.description}
                    onChange={(e) =>
                      setFormData((prev) => ({
                        ...prev,
                        description: e.target.value,
                      }))
                    }
                    placeholder="Enter description (optional)"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    Add Contacts *
                  </label>

                  <div className="space-y-3">
                    {/* Device Contacts Button (Disabled for Web) */}
                    <button
                      disabled={true}
                      className="w-full flex items-center justify-between px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 cursor-not-allowed opacity-60"
                    >
                      <div className="flex items-center gap-3">
                        <Smartphone className="w-5 h-5 text-gray-400" />
                        <div className="text-left">
                          <div className="text-sm font-medium text-gray-600">
                            Access Device Contacts
                          </div>
                          <div className="text-xs text-gray-500">
                            Only available in mobile apps
                          </div>
                        </div>
                      </div>
                      <span className="text-xs bg-gray-200 text-gray-600 px-2 py-1 rounded">
                        Disabled
                      </span>
                    </button>

                    {/* File Import */}
                    <div className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center gap-2">
                          <Upload className="w-5 h-5 text-blue-600" />
                          <span className="text-sm font-medium">
                            Import from File
                          </span>
                        </div>
                        <label className="cursor-pointer bg-blue-50 hover:bg-blue-100 text-blue-700 px-3 py-1 rounded text-sm">
                          <input
                            type="file"
                            accept=".csv,.xlsx,.xls"
                            onChange={handleFileImport}
                            className="hidden"
                          />
                          Choose File
                        </label>
                      </div>
                      <p className="text-xs text-gray-500">
                        Supported formats: CSV, Excel (.xlsx, .xls)
                        <br />
                        Expected format: name,phone (with header row)
                      </p>
                    </div>

                    {/* Current Contacts List */}
                    {formData.contacts.length > 0 && (
                      <div className="border border-gray-200 rounded-lg">
                        <div className="p-3 bg-gray-50 border-b border-gray-200">
                          <h4 className="text-sm font-medium text-gray-700">
                            Selected Contacts ({formData.contacts.length})
                          </h4>
                        </div>
                        <div className="max-h-40 overflow-y-auto">
                          {formData.contacts.map((contact) => (
                            <div
                              key={contact.id}
                              className="flex items-center justify-between p-3 border-b border-gray-100 last:border-b-0"
                            >
                              <div>
                                <p className="text-sm font-medium text-gray-800">
                                  {contact.name}
                                </p>
                                <p className="text-xs text-gray-500">
                                  {contact.phone}
                                </p>
                              </div>
                              <button
                                onClick={() => handleRemoveContact(contact.id)}
                                className="text-red-600 hover:text-red-800 p-1"
                              >
                                <X className="w-4 h-4" />
                              </button>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>

            <div className="p-6 border-t border-gray-200 flex justify-end gap-3">
              <button
                onClick={() => {
                  setIsDialogOpen(false);
                  resetForm();
                  setSelectedGroup(null);
                }}
                className="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={handleSaveGroup}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
              >
                {isEditMode ? "Save Changes" : "Create Group"}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Delete Confirmation Dialog */}
      {isDeleteDialogOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
            <div className="p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-2">
                Delete Group
              </h2>
              <p className="text-gray-600 mb-6">
                Are you sure you want to delete {selectedGroup?.name}? This
                action cannot be undone.
              </p>
              <div className="flex justify-end gap-3">
                <button
                  onClick={() => setIsDeleteDialogOpen(false)}
                  className="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={handleDeleteGroup}
                  className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
                >
                  Delete Group
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
